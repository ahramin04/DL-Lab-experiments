#CNN for simple image classification
import tensorflow as tf
from tensorflow.keras import layers
model = tf.keras.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64,(3,3),activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Conv2D(128,(3,3),activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Flatten(),
        layers.Dense(512,activation='relu'),
        layers.Dense(1,activation='sigmoid')])
model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['accuracy'])
train_datagen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
test_datagen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
train_generator=train_datagen.flow_from_directory("C:\Users\Administrator\Downloads\image1.jpeg",target_size=(150,150),batch_size=20,class_mode='binary')
test_generator=test_datagen.flow_from_directory("C:\Users\Administrator\Downloads\image2.jpeg",target_size=(150,150),batch_size=20,class_mode='binary')
history=model.fit(train_generator,step_per_epoch=100,epochs=30,validation_data=test_generator,validation_steps=50 )
test_loss,test_acc=model.evaluate(test_generator,steps=50)
print("test accuracy:",test_acc)
