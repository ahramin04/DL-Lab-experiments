#1.	Handwritten digit classification
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
(train_images,train_labels),(_,_)=mnist.load_data()
num_images=5
plt.figure(figsize=(8,4))
for i in range(num_images):
  plt.subplot(4,5,i+1)
  plt.imshow(train_images[i],cmap='gray')
  plt.title(f"Label:(train_labels[i])")
  plt.axis('off')
  plt.tight_layout()
plt.show()
[######## 1.2 ]
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten
import matplotlib.pyplot as plt
(train_images,train_labels),(test_images,test_labels)=mnist.load_data()
train_images,test_images=train_images/255.0,test_images/255.0
model=Sequential([
    Flatten(input_shape=(28,28)),
    Dense(128,activation='relu'),
    Dense(64,activation='relu'),
    Dense(10,activation='softmax')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
history=model.fit(train_images,train_labels,epochs=5,batch_size=32,validation_split=0.2)
test_loss,test_acc=model.evaluate(test_images,test_labels)
print(f'Test accuracy:(test_acc)')
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['train','validation'],loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.xlabel('Epoch')
plt.ylabel('loss')
plt.legend(['train','validation'],loc='upper left')
plt.show()
