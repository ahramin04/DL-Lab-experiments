import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Embedding,LSTM,Dropout
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.datasets import reuters
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
(x_train, y_train), (x_test, y_test)= reuters.load_data(num_words=10000)
max_len = 200
x_train = pad_sequences(x_train, maxlen= max_len)
x_test = pad_sequences(x_train, maxlen= max_len)
y_train=to_categorical(y_train)
y_test=to_categorical(y_test)
model=Sequential()
model.add(Embedding(input_dim=10000,output_dim=128,input_length=max_len))
model.add(LSTM(64,return_sequences=True))
model.add(LSTM(64))
model.add(Dropout(0.5))
model.add(Dense(64,activation='relu'))
model.add(Dense(46,activation='softmax'))
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
history=model.fit(x_train,y_train,epochs=3,batch_size=64,validation_split=0.2)
loss,accuracy=model.evaluate(x_test,y_test)
print(f"Test Loss:{loss:.4f}")
print(f"Test Accuracy:{accuracy:.4f}")
def plot_history(history):
  plt.figure(figsize=(12,6))
  plt.subplot(1,2,1)
  plt.plot(history.history['accuracy'])
  plt.plot(history.history['val_accuracy'])
  plt.title('Model Accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.subplot(1,2,2)
  plt.plot(history.history['val_accuracy'])
  plt.title('Model Loss')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.tight_layout()
  plt.show()
plot_history(history)
e  
